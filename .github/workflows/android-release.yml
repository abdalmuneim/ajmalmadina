### reference--->  https://blog.logrocket.com/flutter-ci-cd-using-github-actions/

name: Android Release

# 1 Controls when the workflow will run

on:
  # 2 Triggers the workflow on push or pull request events for the "release" branch;
  # you can change it according to your requirement

  ### close push because if take more time and expensive
  # push:
  #   branches: [ "main" ]
  pull_request:
    branches: ["main"]

  # 3 Allows you to run this workflow manually from the Actions tab from your GitHub repo
  # (a workflow run is made up of one or more jobs that can run sequentially or in parallel)

  workflow_dispatch:

# 4 currently Contains tow job [version,build]

jobs:
  # 5 Contains the type of runner that the job will run on

  # Created a new job version that will be executed before the build job
  build:
    # 6 Uses steps to represent a sequence of tasks that will be executed as part of job

    # to only merge if there is a merge action
    if: github.event.pull_request.merged == true
    # Contains the type of runner that the job will run on
    runs-on: ubuntu-latest

    # 7 Readies your repository under $GITHUB_WORKSPACE, so your job can access it
    steps:
      # 8 Sets up Java so your job can use it for the Flutter app build
      - uses: actions/checkout@v3

      ############################# Git version #############################
      - name: Get version.txt
        uses: actions/download-artifact@v2
        with:
          name: gitversion
      # 3
      - name: Create new file without newline char from version.txt
        run: tr -d '\n' < version.txt > version1.txt
      # 4
      - name: Read version
        id: version
        uses: juliangruber/read-file-action@v1
        with:
          path: version1.txt
      # 5
      - name: Update version in YAML
        run: sed -i 's/99.99.99+99/${{ steps.version.outputs.content }}+${{ github.run_number }}/g' pubspec.yaml

      ############################# flutter workflow #############################
      # 9 Sets up Flutter using the subosito Flutter workflow
      - uses: actions/setup-java@v3
        with:
          distribution: "zulu"
          java-version: "12.x"
          # providing Gradle to be cached with respect to the Java SDK
          cache: "gradle"

      # 10 Adjusts to the Flutter version you are working with
      - uses: subosito/flutter-action@v2
        with:
          # 11 Runs a single command using the runner’s shell
          flutter-version: "3.3.9"
          channel: "stable"
          # enabling caching for the Flutter SDK
          cache: true

      # caching build  - gradle  - pub-cache
      - name: Cache
        uses: actions/cache@v2
        with:
          path: |
            build/
            android/.gradle/
          key: ${{ runner.os }}-build_and_android-${{ hashFiles('**/*.gradle*', 'pubspec.lock') }}

      # Runs a single command using the runner’s shell
      - name: Get dependencies
        run: flutter pub get

      # analyzing the app to know that there is an build issue or not
      - name: Run analyzer
        run: flutter analyze

      ############################# Keystore For Google Play #############################
      # Decoded the base64 encoded keystore value saved as a secret to ID android_keystore
      - name: Download Android keystore
        id: android_keystore
        uses: timheuer/base64-to-file@v1.0.3
        with:
          fileName: upload-keystore.jks
          encodedString: ${{ secrets.KEYSTORE_BASE64 }}

      # Created key.properties using the secrets and android_keystore
      - name: Create key.properties
        run: |
          echo "storeFile=${{ steps.android_keystore.outputs.filePath }}" > android/key.properties
          echo "storePassword=${{ secrets.STORE_PASSWORD }}" >> android/key.properties
          echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
          echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties

      ############################# Uploaded APK Release #############################
      # Runs a set of commands using the runners shell
      - name: Start release build aab
        run: flutter build appbundle --release

      - name: Start release build APK
        run: flutter build apk --release

      # Uploaded the APK release as an artifact to be used in the next job
      - name: Upload APK Release
        uses: actions/upload-artifact@v2
        with:
          name: apk-release
          path: build/app/outputs/flutter-apk/app-release.apk

      ############################# Github Release #############################
      # creating github release
      - name: Create a Release in GitHub
        uses: ncipollo/release-action@v1
        with:
          artifacts: "build/app/outputs/flutter-apk/app-release.apk"
          token: ${{ secrets.GITHUB_TOKEN }}
          tag: Android_Release_${{ steps.read-version.outputs.version-number }}
          allowUpdates: true

############################# Upload App To Google   #############################
#   # Used the upload-google.play@v1 workflow with the PLAYSTORE_ACCOUNT_KEY secret,
#   # your app package name, the track in which you want to upload the build and its status
# - name: Release Build to internal track
#   uses: r0adkll/upload-google-play@v1
#   with:
#     serviceAccountJsonPlainText: ${{ secrets.PLAYSTORE_ACCOUNT_KEY }}
#     packageName: <YOUR_PACKAGE_NAME>
#     releaseFiles: build/app/outputs/bundle/release/app-release.aab
#     track: internal